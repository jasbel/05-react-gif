{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","cat","onSubmit","type","value","onChange","target","onClick","GifGridItem","title","url","id","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGrid","gif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+LA+CeA,EA5CK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,KAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAQjCC,EAAe,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAmBO,OAGpCN,EAAc,MAKtB,OACI,gCACI,mCAAMD,EAAN,OACA,sBAAMQ,SAAaN,EAAnB,SACI,uBACIO,KAAK,OACLC,MAAUV,EACVW,SAxBE,SAACR,GACfF,EAAcE,EAAES,OAAOF,YA2BnB,wBACIG,QAAWX,EADf,2B,QCvBGY,EAVK,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAWC,GAAS,EAAbC,GAAa,EAATD,KAE7B,OACI,sBAAKE,UAAU,yCAAf,UACI,qBAAKC,IAAKH,EAAKI,IAAKL,IACpB,4BAAIA,Q,uBCLHM,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbP,EADa,iDACoCQ,UAAUF,GAD9C,+DAGAG,MAAMT,GAHN,cAGbU,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHd,GAAIc,EAAId,GACRF,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIC,cAAN,aAAE,EAAYC,iBAAiBjB,QAVvB,kBAeZa,GAfY,4CAAH,sDCuBLK,EAtBM,SAAEZ,GAAc,IAAD,EACNvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAHmB,mBACzBC,EADyB,KAClBC,EADkB,KAmBhC,OAbAC,qBAAU,WAENjB,EAASC,GACJiB,MAAM,SAAAC,GACHH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAItB,CAACb,IAGGc,GCOIK,EAzBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,EAEGY,EAAaZ,GAAjCU,EAFiB,EAEvBJ,KAAcO,EAFS,EAETA,QAErB,OACI,qCACI,qBAAIjB,UAAU,oCAAd,cAAsDI,EAAtD,OAEEa,GAAW,mBAAGjB,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQc,EAAOF,KAAI,SAAAY,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIzB,aCctB0B,EA5BM,WAAO,IAAD,EAEa5C,mBAAS,CAAC,cAFvB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAIvB,OACI,qCACI,gDACA,cAAC,EAAD,CACIA,cAAkBA,IAEtB,uBAIA,6BAEI8C,EAAWd,KAAI,SAACvB,GAAD,OACX,cAAC,EAAD,CACIe,SAAYf,GACLA,Y,MCjB/BsC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1691e302.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState(' ')\r\n\r\n    const handleAdd = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        //evitar los vacios\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cat => [inputValue,...cat]);\r\n\r\n            //vaciar input\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2> {inputValue} </h2>\r\n            <form onSubmit = { handleSubmit } >\r\n                <input \r\n                    type=\"text\"\r\n                    value = { inputValue}\r\n                    onChange={handleAdd}\r\n                    \r\n                />\r\n            </form>\r\n            <button\r\n                onClick = {handleSubmit}\r\n            > Agregar </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n// obligar propiedades requeridas\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({title, id, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;\r\n","//usando la api de giphy\r\n/** encodeURI: sirve para quitar espacios o regular la escritura */\r\nexport const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=XyiNnwGMpqYVMgHjojGHlfn51EuC5Wqn`;\r\n\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    } )\r\n\r\n    // setImages(gifs);\r\n    return gifs;\r\n}","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nconst useFetchGifs = ( category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\n    return state; //{ data:[], loading: true };\r\n}\r\n\r\nexport default useFetchGifs\r\n","import React from 'react'\r\nimport GifGridItem from './GifGridItem';\r\nimport useFetchGifs from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const {data: images, loading } = useFetchGifs(category);    \r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\" > { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">loading...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(gif =>\r\n                        <GifGridItem \r\n                            key={gif.id}\r\n                            {...gif}\r\n                        />\r\n                        \r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    return (\r\n        <>\r\n            <h2>gig expert app</h2>\r\n            <AddCategory\r\n                setCategories = { setCategories }\r\n            />\r\n            <hr/>\r\n\r\n             \r\n\r\n            <ol>\r\n            { \r\n                categories.map((cat) => (\r\n                    <GifGrid\r\n                        category = {cat}\r\n                        key = {cat}\r\n                    />\r\n                )) \r\n            }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\n// import reportWebVitals from './reportWebVitals';\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <GifExpertApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}